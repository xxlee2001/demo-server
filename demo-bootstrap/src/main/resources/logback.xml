<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
	
	<conversionRule conversionWord="agentId" converterClass="com.yonyou.iuap.ucf.core.log.utils.AgentIdConverter" />

    <property name="log_name" value="demo-server"/>
    <property name="APP_Name" value="demo-server" />
    <property name="spring.domain.name" value="iuap"/>
    <property name="spring.application.name" value="demo-server" />
	<property name="logging.path" value="/data/logs/app"/>
	<!-- 日志输出格式 -->
	<property name="COMMON_LOG_PATTERN"
		value="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{36}] [%X{traceId}] [%X{spanId}] [%X{pSpanId}] [%X{rpcOccurrence}] [%X{code}] [%X{req.requestURL}] [%X{req.queryString}] [${spring.domain.name},${spring.application.name},%X{sysId},%X{tenantId},%X{userId},%X{profile},%X{agentId}] - %msg %ex%n" />
	
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${COMMON_LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logging.path}/${APP_Name}/${log_name}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${logging.path}/${APP_Name}/%d{yyyy-MM-dd}/${APP_Name}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            	<!-- 单个文件最大存储 -->
		        <maxFileSize>100MB</maxFileSize>
		    </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!-- 总文件最大存储 -->
			<totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%cn代表输出在类附加到日志上的上下文名字即APP_Name，%thread表示线程名，%-5level：级别从左显示5个字符宽度，%X{ }来占位，从对应的MDC获取key的值，%msg：日志消息，%n是换行符-->
            <pattern>${COMMON_LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- 异步输出 -->
    <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、ERROR、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="FILE"/>
    </appender>


    <!-- 自定义特殊包的日志级别 -->
    <logger name="com.yonyou" level="${log.level}" />
    <logger name="dao" level="${log.level}" />

    <!-- mybatis-->
    <logger name="com.ibatis" level="${log.level}" />
    <logger name="java.sql" level="${log.level}" />
	<!-- 当运行在docker里时(mesos | k8s)，去掉console输出-->
	<if condition='!isDefined("MESOS_TASK_ID") &amp;&amp; !isDefined("KUBERNETES_PORT")'>
		<then>
			<root level="${log.level}">
				<appender-ref ref="console" />
			</root>
		</then>
		<else>
			<root level="${log.level}">
				<appender-ref ref="ASYNC" />
			</root>
		</else>
	</if> 
</configuration>
